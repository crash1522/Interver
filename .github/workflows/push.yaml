# Todo: 
# 1. on push 트리거 main 브랜치로 바꾸기
# 2. argocd가 모니터링할 브랜치 생성
# 3. push origin argocd가 모니터링할 브랜치로 설정


name: Push to ECR
on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set Dev env variables
        run: |
          echo "Main branch"
          echo "DESTINATION=infra/" >> $GITHUB_ENV     
 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setting Environment Variables
        run: |
          echo "Setting Environment Variables"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SQLALCHEMY_DATABASE_URL: ${{ secrets.SQLALCHEMY_DATABASE_URL }}
          SQLALCHEMY_DATABASE_URL_ASYNC: ${{ secrets.SQLALCHEMY_DATABASE_URL_ASYNC }}
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
  
      - name: Export Secrets as Environment Variables
        run: |
          export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          export ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
          export GIT_ACCESS_TOKEN=${{ secrets.GIT_ACCESS_TOKEN }}
          export SECRET_KEY=${{ secrets.SECRET_KEY }}
          export SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }}
          export SQLALCHEMY_DATABASE_URL_ASYNC=${{ secrets.SQLALCHEMY_DATABASE_URL_ASYNC }}
          export TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}
        shell: bash
  

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . \
            --build-arg SQLALCHEMY_DATABASE_URL="${{ secrets.SQLALCHEMY_DATABASE_URL }}" \
            --build-arg OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            --build-arg ACCESS_TOKEN_EXPIRE_MINUTES="${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" \
            --build-arg GIT_ACCESS_TOKEN="${{ secrets.GIT_ACCESS_TOKEN }}" \
            --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            --build-arg SQLALCHEMY_DATABASE_URL_ASYNC="${{ secrets.SQLALCHEMY_DATABASE_URL_ASYNC }}" \
            --build-arg TAVILY_API_KEY="${{ secrets.TAVILY_API_KEY }}"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      

      - name: Git config
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Set commit msg 
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          echo "COMMIT_MSG=Push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          echo $COMMIT_MSG  

      - name: Get Access Permission
        uses: actions/checkout@v3
        with:
          #repository: your/gitops-repository
          ref: prod/argocd-monitoring
          token: ${{ secrets.GIT_ACCESS_TOKEN }}
          
      - name: chmod repo destination
        run: |
          chmod +x $DESTINATION
          ls
                  
      - name: git push image tag to prod/argocd-monitoring branch.
        env:
          GITHUB_REPO: ${{ github.repository.name }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          git config pull.rebase false
          git pull origin main --allow-unrelated-histories
          sed -i -e 's@${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:.*@${{ steps.build-image.outputs.image }}@g' $DESTINATION/interver.yaml
          git add .
          git commit -m "$COMMIT_MSG"
          git push -f --set-upstream origin prod/argocd-monitoring